plugins {
    alias(libs.plugins.shadow)
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation libs.quilt.loader
    modApi libs.quilt.api

    modApi(libs.cloth.fabric) {
        exclude module:"fabric-api"
    }

    include libs.cloth.fabric

    modImplementation(libs.modmenu) {
        exclude module:"fabric-api"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "group", rootProject.maven_group
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "group": rootProject.maven_group,
                "version": project.version
    }
}

archivesBaseName += "-quilt"

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    // Stored in ~/.gradle/gradle.properties
    if (project.hasProperty('curseApiKey'))
        apiKey = project.curseApiKey
    else if (System.getenv("CURSE_API_KEY") != null)
        apiKey = System.getenv("CURSE_API_KEY")
    else
        println 'No CurseForge API key found, \'curseforge\' tasks will not work'

    project {
        id = project.curseforge_id
        releaseType = 'release'
        addGameVersion libs.versions.minecraft.get()
        addGameVersion 'Quilt'
        setChangelog 'For the changelog, please see https://github.com/Scotsguy/now-playing/releases'
        mainArtifact(remapJar) {
            displayName = "v$project.version"
            relations {
                requiredDependency 'quilt-api'
                embeddedLibrary 'cloth-config'
            }
        }
    }


    options {
        forgeGradleIntegration = false
        detectNewerJava = true
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

