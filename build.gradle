plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.10.0-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1' apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0'

}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: 'io.github.juuxel.loom-quiltflower-mini'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com" }
        maven { url "https://maven.parchmentmc.org" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
/*
plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com" }
    maven { url "https://maven.parchmentmc.org" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //include(modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version)))
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(modApi("me.shedaniel.cloth:cloth-config-fabric:6.1.48") {
        exclude module:"fabric-api"
    })

    modImplementation("com.terraformersmc:modmenu:3.0.0") {
        exclude module:"fabric-api"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

tasks.remapJar {
    afterEvaluate {
        addNestedDependencies = false
        archiveClassifier.set("slim")
    }
}

task remapStandaloneJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-fat.jar"
        addNestedDependencies = true
    }
}

tasks.build.dependsOn remapStandaloneJar

curseforge {
    // Stored in ~/.gradle/gradle.properties
    if (project.hasProperty('curseApiKey'))
        apiKey = project.curseApiKey
    else if (System.getenv("CURSE_API_KEY") != null)
        apiKey = System.getenv("CURSE_API_KEY")
    else
        println 'No CurseForge API key found, \'curseforge\' tasks will not work'

    project {
        id = project.curseforge_id
        releaseType = 'release'
        addGameVersion project.minecraft_version
        addGameVersion 'Fabric'
        setChangelog 'For the changelog, please see https://github.com/Scotsguy/now-playing/releases'
        mainArtifact(remapStandaloneJar) {
            displayName = "v$project.version"
            relations {
                embeddedLibrary 'fabric-api'
                embeddedLibrary 'cloth-config'
            }
        }
        addArtifact remapJar
    }
    options {
        forgeGradleIntegration = false
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
*/
